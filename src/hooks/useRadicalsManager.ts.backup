import { useState, useEffect, useMemo } from 'react';
import { WKRadical, WKStudyMaterial } from '@bachmacintosh/wanikani-api-types';

export interface Radical {
    id: number;
    meaning: string;
    characters?: string;
    level: number;
    currentSynonyms: string[];
    selected: boolean;
    translatedSynonyms: string[];
    meaningMnemonic?: string;
}

export interface UploadStats {
    created: number;
    updated: number;
    failed: number;
    skipped: number;
    successful: number;
}

export type SynonymMode = 'replace' | 'smart-merge' | 'delete';

export function useRadicalsManager() {
    // Token state with localStorage persistence
    const [apiToken, setApiToken] = useState(() => {
        if (typeof window !== 'undefined') {
            return localStorage.getItem('wanikani-api-token') || '';
        }
        return '';
    });
    
    const [deeplToken, setDeeplToken] = useState(() => {
        if (typeof window !== 'undefined') {
            return localStorage.getItem('deepl-api-token') || '';
        }
        return '';
    });
    
    // Settings state
    const [selectedLevel, setSelectedLevel] = useState<number | 'all'>(1);
    const [synonymMode, setSynonymMode] = useState<SynonymMode>('smart-merge');
    
    // Processing state
    const [isProcessing, setIsProcessing] = useState(false);
    const [progress] = useState(0);
    const [translationStatus] = useState('');
    const [uploadStatus] = useState('');
    const [uploadStats] = useState<UploadStats>({
        created: 0,
        updated: 0,
        failed: 0,
        skipped: 0,
        successful: 0
    });
    
    // API state
    const [wkRadicals] = useState<WKRadical[]>([]);
    const [studyMaterials] = useState<WKStudyMaterial[]>([]);
    const [isLoadingRadicals] = useState(false);
    const [apiError] = useState<string>('');
    
    // Handle token changes with localStorage persistence
    const handleApiTokenChange = (token: string) => {
        setApiToken(token);
        if (typeof window !== 'undefined') {
            if (token.trim()) {
                localStorage.setItem('wanikani-api-token', token);
            } else {
                localStorage.removeItem('wanikani-api-token');
            }
        }
    };
    
    const handleDeeplTokenChange = (token: string) => {
        setDeeplToken(token);
        if (typeof window !== 'undefined') {
            if (token.trim()) {
                localStorage.setItem('deepl-api-token', token);
            } else {
                localStorage.removeItem('deepl-api-token');
            }
        }
    };
    
    // Convert Wanikani radicals to internal format
    const convertToInternalFormat = (wkRadicals: WKRadical[], studyMaterials: WKStudyMaterial[]): Radical[] => {
        const studyMaterialsMap = new Map<number, WKStudyMaterial>();
        studyMaterials?.forEach(sm => {
            if (sm?.data?.subject_id) {
                studyMaterialsMap.set(sm.data.subject_id, sm);
            }
        });

        return wkRadicals.map(radical => ({
            id: radical.id,
            meaning: radical.data.meanings[0]?.meaning || 'Unknown',
            characters: radical.data.characters || undefined,
            level: radical.data.level,
            currentSynonyms: studyMaterialsMap.get(radical.id)?.data.meaning_synonyms || [],
            selected: true,
            translatedSynonyms: [],
            meaningMnemonic: radical.data.meaning_mnemonic || undefined
        }));
    };
    
    // Filter radicals by selected level
    const filteredRadicals = useMemo(() => {
        if (wkRadicals.length === 0) return [];
        
        const internalRadicals = convertToInternalFormat(wkRadicals, studyMaterials);
        
        if (selectedLevel === 'all') {
            return internalRadicals;
        }
        
        return internalRadicals.filter(radical => radical.level === selectedLevel);
    }, [wkRadicals, studyMaterials, selectedLevel]);
    
    // Placeholder functions for now
    const loadRadicalsFromAPI = async () => {
        console.log('loadRadicalsFromAPI - to be implemented');
    };
    
    const refreshStudyMaterials = async () => {
        console.log('refreshStudyMaterials - to be implemented');
    };
    
    const processTranslations = async (radicals: Radical[]) => {
        console.log('processTranslations - to be implemented', radicals.length, 'radicals');
    };
    
    // Load radicals when API token changes
    useEffect(() => {
        if (apiToken.trim()) {
            loadRadicalsFromAPI();
        }
    }, [apiToken]);
    
    return {
        // State
        apiToken,
        deeplToken,
        selectedLevel,
        synonymMode,
        isProcessing,
        progress,
        translationStatus,
        uploadStatus,
        uploadStats,
        wkRadicals,
        studyMaterials,
        isLoadingRadicals,
        apiError,
        filteredRadicals,
        
        // Actions
        handleApiTokenChange,
        handleDeeplTokenChange,
        setSelectedLevel,
        setSynonymMode,
        setIsProcessing,
        processTranslations,
        loadRadicalsFromAPI,
        refreshStudyMaterials
    };
}
